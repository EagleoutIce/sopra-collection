% \def\styleimp#1{import#1}

\lstdefinelanguage{lJava}{
    % language=java,
    keywordstyle = [5]\sol@style@get{literals}, % for other literals :D
    sensitive, % we are case sensitive
    deletekeywords = {<,>,\,},
    otherkeywords = {->},
    alsoletter={@_},
    alsoother={[]},
    comment=[l]{//},
    keywordsprefix={@},
    moredelim=**[is][{\solhlbox{warning}}]{|warn|}{|warn|},
    moredelim=**[is][{\solhlboxd{\solcustom}}]{|custom|}{|custom|},
    moredelim=[is][]{|plain|}{|plain|},
    % moredelim=**[il][\styleimp]{import},
    moredelim=[is][\sol@style@get{highlight}]{|ihl|}{|ihl|},
    moredelim=**[is][\sol@style@get{numbers}]{|num|}{|num|},
    moredelim=**[is][\sol@style@get{literals}]{|str|}{|str|},
    moredelim=**[is][\sol@style@get{comments}]{|cmt|}{|cmt|},
    moredelim=**[is][\itshape\bfseries]{|bhl|}{|bhl|},
    morecomment  =[s]{/*}{*/},
    morestring = [s]{"}{"}, % maybe use d?
    morestring = [s]{'}{'},
    columns = flexible,
    % major keywords:
    morekeywords = {abstract,public,private,protected,static,class,interface,final,const,instanceof,synchronized,native,null,super,transient,volatile,default,extends,implements,import,package,new,for,goto,if,else,try,switch,case,catch,finally,break,continue,native,label,return,throw,throws,while,enum,do},
    % DataTypes
    morekeywords = [2]{boolean,Boolean,byte,Byte,char,Char,%
            continue,default,double,Double,else,%
            float,Float,int,Integer,%
            long,Long,short,Short,this,%
            void,String,var},
    morekeywords = [3]{System,Stream,List,Map,Queue,Deque,ArrayList,SingleLinkedList,SortedList,SortedSet,Set,HashMap,Tree,HashSet,FileReader,BufferedReader,InputStream,BufferedInputStream,BufferedOutputStream,OutputStream,FileInputStream,FileOutputStream,FileWriter,RandomAccessFile,ObjectOutputStream,ObjectInputStream,File,LocalDate,Node,NodeList,DocumentBuilder,Document,DocumentBuilderFactory,XPathExpression,XPath,XPathFactory,NodeList,Transformer,DOMSource,SimpleDateFormat,ArrayIndexOutOfBoundsException,IndexOutOfBoundsException,ArithmeticException,%
    TransformerFactory,StreamResult,StreamSource,SAXParser,SAXParserFactory,XMLReader,DriverManager,Connection,Statement,ResultSet,PreparedStatement,Text,Font,Application,Pane,Leaf,Component,Composite,Leaf,Runtime,ExecutorService,Math,Executors,LinkedList,Callable,ExecutionException,InterruptedException,TimeUnit,FlowPane,Button,StackPane,Future,Double,Thread,Predicate,Function,Color,Scene,Pattern,Matcher,Event,Camera,EventHandler,EventListener,EventType,Observer,Observable,ObservableList,ObservableMap,ObservableArray,Button,TextArea,Pos,%
    Scanner,Arrays,Calendar,Date,UUID,Point,Element,Circle,Rectangle,Richtung,Schiene,GridPane,FileChooser,ScrollPane,ExtensionFilter,Worker,InputStreamReader,MouseEvent,Task,Service,IntStream,PrintWriter,Socket,ServerSocket,Lebewesen,Student,Dozent,Mensch,AbstractList,Sortable,Compareable,%
    Background,BackgroundFill,CornerRadii,Insets,AtomicInteger,Random,EntityManager,EntityManagerFactory,Query,Persistence,Attributes,Files,Paths,Collectors,Collection,Iterable,Iterator,Object,Stage,EOFException,ClassNotFoundException,IOException,XPathConstants,SQLException,Exception,Runnable,IllegalStateException,GenerationType},
    morekeywords = [4]{NODESET,MULTILINE,MAX_VALUE,CENTER_LEFT,CENTER_RIGHT,CENTER,TOP_LEFT,TOP_CENTER,TOP_RIGHT,BLUE,RED,GREEN,YELLOW,EMPTY,SECONDS,MAX_VALUE,IDENTITY,getClass,toString,out,in,err,OBJECT},
    morekeywords=[5]{true,false},
    % escape and format sequences:
    add to literate={\\u}{{\solGet{keywordB}{\textbackslash u}}}2 {\\n}{{\solGet{keywordB}{\textbackslash n}}}2 {\\r}{{\solGet{keywordB}{\textbackslash r}}}2 {\\t}{{\solGet{keywordB}{\textbackslash t}}}2 {\\033[}{{\solGet{keywordB}{\textbackslash033[}}}4 {\\"}{{\solGet{keywordB}{\textbackslash\dq}}}2 {\\\\}{{\solGet{keywordB}{\textbackslash\textbackslash}}}2 {\%c}{{\solGet{keywordB}{\%c}}}2 {\%d}{{\solGet{keywordB}{\%d}}}2 {\%s}{{\solGet{keywordB}{\%s}}}2 {\%n}{{\solGet{keywordB}{\%n}}}2 {\%b}{{\solGet{keywordB}{\%b}}}2,
}

\RegisterLanguage{java}{lJava}
